{
  "name": "skynet",
  "description": "Skynet IoT network and API",
  "version": "0.0.36",
  "homepage": "http://skynet.im",
  "repository": {
    "type": "git",
    "url": "git://github.com/skynetim/npm"
  },
  "author": {
    "name": "Chris Matthieu",
    "email": "chris@matthieu.us",
    "url": "http://chrismatthieu.com/"
  },
  "main": "./index.js",
  "keywords": [
    "iot",
    "internet of things",
    "arduino",
    "tessel",
    "raspberrypi",
    "skynet"
  ],
  "dependencies": {
    "socket.io-client": "0.9.16",
    "mqtt": "*"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/skynetim/npm/raw/master/LICENSE"
    }
  ],
  "readme": "```\n SSSSS  kk                            tt\nSS      kk  kk yy   yy nn nnn    eee  tt\n SSSSS  kkkkk  yy   yy nnn  nn ee   e tttt  \n     SS kk kk   yyyyyy nn   nn eeeee  tt\n SSSSS  kk  kk      yy nn   nn  eeeee  tttt\n                yyyyy\n```\n\nPhase 1 - Build a network and realtime API for enabling machine-to-machine communications.\n\nHere are several quick screencasts that demostrate what you can do with Skynet:\n\n[Screencast 1: What is Skynet?](http://www.youtube.com/watch?v=cPs1JNFyXjk)\n\n[Screencast 2: Introducing an Arduino](http://www.youtube.com/watch?v=SzaTPiaDDQI)\n\n[Screencast 3: Security device tokens added](http://www.youtube.com/watch?v=TB6RyzT10EA)\n\n[Screencast 4: Node.JS NPM module released](http://www.youtube.com/watch?v=0WjNG6AOcXM)\n\n[Screencast 5: PubSub feature added to device UUID channels](https://www.youtube.com/watch?v=SL_c1MSgMaw)\n\n[Screencast 6: Events endpoint added to APIs](https://www.youtube.com/watch?v=GJqSabO1EUA)\n\n\nExample\n\n```\nvar skynet = require('skynet');\n\nvar conn = skynet.createConnection({\n  \"uuid\": \"ad698900-2546-11e3-87fb-c560cb0ca47b\",\n  \"token\": \"zh4p7as90pt1q0k98fzvwmc9rmjkyb9\",\n  \"protocol\": \"mqtt\", // or \"websocket\"\n  \"qos\": 0, // MQTT Quality of Service (0=no confirmation, 1=confirmation, 2=N/A)\n  \"server\": \"localhost\", // optional - defaults to http://skynet.im\n  \"port\": 3000  // optional - defaults to 80\n});\n\nconn.on('notReady', function(data){\n  console.log('UUID FAILED AUTHENTICATION!');\n  console.log(data);\n});\n\nconn.on('ready', function(data){\n  console.log('UUID AUTHENTICATED!');\n  console.log(data);\n\n  // Subscribe to device\n  conn.subscribe({\n    \"uuid\": \"f828ef20-29f7-11e3-9604-b360d462c699\",\n    \"token\": \"syep2lu2d0io1or305llz5u9ijrwwmi\"\n  }, function (data) {\n    console.log(data);\n  });\n\n  // Subscribe to device\n  conn.unsubscribe({\n    \"uuid\": \"f828ef20-29f7-11e3-9604-b360d462c699\"\n  }, function (data) {\n    console.log(data);\n  });  \n\n  // Send and receive messages\n  conn.message({\n    \"devices\": \"*\",\n    \"payload\": {\n      \"skynet\":\"online\"\n    },\n    \"qos\": 0\n  });\n  conn.message({\n    \"devices\": \"0d3a53a0-2a0b-11e3-b09c-ff4de847b2cc\",\n    \"payload\": {\n      \"skynet\":\"online\"\n    },\n    \"qos\": 0\n  });\n  conn.message({\n    \"devices\": [\"0d3a53...847b2cc\", \"11123...44567\"],\n    \"payload\": {\n      \"skynet\":\"online\"\n    },\n    \"qos\": 0\n  });\n\n  conn.on('message', function(channel, message){\n    console.log('message received', channel, message);\n  });\n\n\n  // Event triggered when device loses connection to skynet\n  conn.on('disconnect', function(data){\n    console.log('disconnected from skynet');\n  });\n\n  // Register a device (note: you can leave off the token to have skynet generate one for you)\n  conn.register({\n    \"token\": \"zh4p7as90pt1q0k98fzvwmc9rmjkyb9\",\n    \"type\": \"drone\"\n  }, function (data) {\n    console.log(data);\n  });\n\n  // UnRegister a device\n  conn.unregister({\n    \"uuid\": \"zh4p7as90pt1q0k98fzvwmc9rmjkyb9\",\n    \"token\": \"zh4p7as90pt1q0k98fzvwmc9rmjkyb9\"\n  }, function (data) {\n    console.log(data);\n  });\n\n\n  // Update device\n  conn.update({\n    \"uuid\":\"ad698900-2546-11e3-87fb-c560cb0ca47b\",\n    \"token\": \"zh4p7as90pt1q0k98fzvwmc9rmjkyb9\",\n    \"armed\":true\n  }, function (data) {\n    console.log(data);\n  });\n\n  // WhoAmI?\n  conn.whoami({\"uuid\":\"ad698900-2546-11e3-87fb-c560cb0ca47b\"}, function (data) {\n    console.log(data);\n  });\n\n  // Receive an array of device UUIDs based on user defined search criteria\n  conn.devices({\n    \"type\":\"drone\"\n  }, function (data) {\n    console.log(data);\n  });\n\n  // Skynet status\n  conn.status(function (data) {\n    console.log(data);\n  });\n\n});\n\n\n\n```\n\nLICENSE\n-------\n\n(MIT License)\n\nCopyright (c) 2014 Octoblu <info@octoblu.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/skynetim/npm/issues"
  },
  "_id": "skynet@0.0.36",
  "_shasum": "b6822210b5985e36f271b85a6af835823a93ecc4",
  "_from": "skynet@",
  "_resolved": "https://registry.npmjs.org/skynet/-/skynet-0.0.36.tgz"
}
